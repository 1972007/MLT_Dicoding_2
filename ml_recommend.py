# -*- coding: utf-8 -*-
"""ml_recommend.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1S9Pc4QQ2QbEuNFLtPdFqJh2BDcYxuVxu

Koneksi ke Google Drive
"""

#Pengambilan file identitas kaggle di drive.
from google.colab import drive
drive.mount('/content/drive')

"""Pemasangan Kaggle"""

#Install kaggle API agar bisa mengunduh dataset kaggle
!pip install kaggle

#Perintah linux untuk membuat folder ~/.kaggle/ dan mengcopy file kaggle.json ke folder tersebut
! mkdir ~/.kaggle/
! cp drive/MyDrive/kaggle.json ~/.kaggle/

#Pengunduhan dataset kaggle
!kaggle datasets download -d lava18/google-play-store-apps

"""Ekstrasi Data"""

import zipfile
def unzip(local_zip,dest_zip):
  zip_ref = zipfile.ZipFile(local_zip, 'r')
  zip_ref.extractall(dest_zip)
  zip_ref.close()
unzip("/content/google-play-store-apps.zip", "/content/google-play-store-apps")

"""Import Library"""

import numpy as np
import pandas as pd
import tensorflow as tf
import seaborn as sns
import sklearn

"""Data loading"""

#Data ini tidak memiliki header, jadi kita tambahkkan dalam parameter names
apps = pd.read_csv("/content/google-play-store-apps/googleplaystore.csv")
print(apps.columns)
apps

apps.describe(include='all')

apps.isnull().sum()

sns.histplot(x=apps['Rating'])

apps.loc[(apps['Rating']>5) ]

"""Menyaring rating yang tidak lebih dari 5"""

apps = apps.loc[(apps['Rating']<=5)]
apps

sns.histplot(x=apps['Rating'])

apps.info()

apps["Reviews"] = pd.to_numeric(apps["Reviews"])
apps.info()

apps.isnull().sum()

apps[apps.isnull().any(axis=1)]

"""Melihat banyak kategori yang ada"""

sns.countplot(y=apps['Category'])

"""Dropping kolom yang kurang terpakai"""

for i in ['Last Updated','Current Ver', "Genres"]:
  try:
    apps.drop(i,axis=1,inplace=True)
  except:
    continue

"""Menghilangkan data null"""

apps = apps.loc[~apps.isnull().any(axis=1)]
apps

apps['Size'].unique()

apps['Size'].str[-1].unique()

apps_sizeChange=apps.copy()
apps_sizeChange

"""Mengganti data size menjadi float"""

#apps_sizeChange.loc[apps_sizeChange['Size'].str[-1]=="M"]
#apps_sizeChange.loc[apps_sizeChange['Size'].str[-1]=="M"]["Size"].str[:-1].astype(float)
#apps_sizeChange['Size'].map(lambda x: x[:-1] if "M" in x else x).loc[(apps_sizeChange['Size'].str[-1]!="k") & (apps_sizeChange['Size'].str[-1]!="e")]
apps_sizeChange["Size"] = apps_sizeChange['Size'].map(lambda x: x[:-1] if "M" in x else x)

#apps_sizeChange['Size'].map(lambda x: float(x[:-1])*0.001 if "k" in x else x).loc[(apps_sizeChange['Size'].str[-1]!="M") & (apps_sizeChange['Size'].str[-1]!="e")]
apps_sizeChange["Size"] = apps_sizeChange['Size'].map(lambda x: float(x[:-1])*0.001 if "k" in x else x)

app_size_number = apps_sizeChange.loc[apps_sizeChange['Size'].str[-1]!="e"]
app_size_number["Size"] = app_size_number["Size"].astype(float)

print("Mean = {}".format(app_size_number["Size"].mean()))
print("Modus = {}".format(app_size_number["Size"].mode()))
print("Median = {}".format(app_size_number["Size"].median()))

apps_sizeChange.loc[apps_sizeChange['Size']=="Varies with device", "Size"] = app_size_number["Size"].mean()
apps_sizeChange

apps_sizeChange["Size"] = apps_sizeChange["Size"].astype(float)
apps_sizeChange.describe()

apps_sizeChange[apps_sizeChange.isnull().any(axis=1)]

apps_sizeChange['Content Rating'].value_counts()

"""Menyatukan data unrated dan Adults only kedalam Mature 17+"""

apps_sizeChange['Content Rating'].replace(["Adults only 18+","Unrated"],["Mature 17+","Mature 17+"], inplace=True)

apps_sizeChange['Content Rating'].value_counts()

version_count = apps_sizeChange["Android Ver"].value_counts()
version_count

version_count[version_count<240].keys(), len(version_count[version_count<240].keys())

apps_sizeChange["Android Ver"].replace(version_count[version_count<240].keys(), ["Others" for i in range(len(version_count[version_count<240].keys()))], inplace=True)
apps_sizeChange["Android Ver"].replace("Varies with device", "Others", inplace=True)

apps_sizeChange["Android Ver"].value_counts()

sns.countplot(y=apps_sizeChange['Android Ver'])

#App	Category	Rating	Reviews	Size	Installs	Type
#Price	Content Rating	Genres	Last Updated	Current Ver	Android Ver
apps_sizeChange.isna().any()

apps_sizeChange.loc[apps_sizeChange[["App"]].duplicated(keep=False)].sort_values(by=["App"])

apps_sizeChange.drop_duplicates(subset="App",inplace=True)

apps_sizeChange.shape

correlation_matrix = apps_sizeChange.corr().round(2)
sns.heatmap(data=correlation_matrix, annot=True, cmap='coolwarm', linewidths=0.5)

scale_cols = ["Rating", "Reviews", "Size", "Installs", "Price"]

apps_sizeChange.columns

apps_sizeChange['Installs'] = pd.to_numeric(apps_sizeChange['Installs'].str.replace(r'\D+','',regex=True))

apps_sizeChange['Price']  = pd.to_numeric(apps_sizeChange['Price'].str.replace(r'\$','',regex=True))

apps_sizeChange.info()

apps_sizeChange

apps_sizeChange.isna().sum().sum()

"""Content-Based Filtering"""

#Category Based
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

tf = TfidfVectorizer()
tfm_category = tf.fit_transform(apps_sizeChange["Category"])
cosine_category=cosine_similarity(tfm_category)
tfm_category, cosine_category

sim_data = pd.DataFrame(cosine_category, index=apps_sizeChange["App"], columns=apps_sizeChange["App"])
sim_data

sim_data.loc["Coloring book moana"]

def get_rec(name, sim_data=sim_data, items=apps_sizeChange, num=20):
  idx = sim_data.loc[:,name].to_numpy().argpartition(range(-1,-num,-1))
  closest = sim_data.columns[idx[-1:-(num+2):-1]]
  closest = closest.drop(name,errors="ignore")
  return pd.DataFrame(closest).merge(items).head(num)

apps.loc[1]

num = 20

sim_to_moana=get_rec("Coloring book moana", num=num)
sim_to_moana

sim_scp= get_rec("The SCP Foundation DB fr nn5n", num=num)
sim_scp

precision = sim_to_moana["Category"].loc[sim_to_moana["Category"]=="ART_AND_DESIGN"].value_counts()[0] / num
precision

precision = sim_scp["Category"].loc[sim_scp["Category"]=="BOOKS_AND_REFERENCE"].value_counts()[0] / num
precision

num=40

#Precision = total jawaban benar/ total jawaban
sim_to_moana=get_rec("Coloring book moana", num=num)
precision = sim_to_moana["Category"].loc[sim_to_moana["Category"]=="ART_AND_DESIGN"].value_counts()[0] / num
precision

precision = sim_scp["Category"].loc[sim_scp["Category"]=="BOOKS_AND_REFERENCE"].value_counts()[0] / num
precision